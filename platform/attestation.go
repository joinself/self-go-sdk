package platform

/*
#cgo LDFLAGS: -lstdc++ -lm -ldl
#cgo darwin LDFLAGS: -lself_sdk -framework CoreFoundation -framework SystemConfiguration -framework Security
#cgo linux LDFLAGS: -lself_sdk
#include <self-sdk.h>
#include <stdlib.h>
*/
import "C"
import (
	"runtime"
	"unsafe"

	"github.com/joinself/self-go-sdk/keypair/signing"
)

//go:linkname newSigningPublicKey github.com/joinself/self-go-sdk/keypair/signing.newSigningPublicKey
func newSigningPublicKey(ptr *C.self_signing_public_key) *signing.PublicKey

type IntegrityType int

const (
	IntegrityTypeUnknown IntegrityType = iota
	IntegrityTypeAndroidPlayIntegrity
	IntegrityTypeIosDeviceCheck
)

type Attestation struct {
	ptr *C.self_platform_attestation
}

func newPlatformAttestation(ptr *C.self_platform_attestation) *Attestation {
	a := &Attestation{
		ptr: ptr,
	}

	runtime.SetFinalizer(a, func(a *Attestation) {
		C.self_platform_attestation_destroy(
			a.ptr,
		)
	})

	return a
}

func platformAttestationPtr(a *Attestation) *C.self_platform_attestation {
	return a.ptr
}

// IntegrityType returns the type of integrity attestation
func (a *Attestation) IntegrityType() IntegrityType {
	switch C.self_platform_attestation_integrity_type(a.ptr) {
	case C.INTEGRITY_ANDROID_PLAY_INTEGRITY:
		return IntegrityTypeAndroidPlayIntegrity
	case C.INTEGRITY_IOS_DEVICE_CHECK:
		return IntegrityTypeIosDeviceCheck
	default:
		return IntegrityTypeUnknown
	}
}

// ApplicationAddress returns the application address that the platform integrity check was generated by
func (a *Attestation) ApplicationAddress() *signing.PublicKey {
	return newSigningPublicKey(
		C.self_platform_attestation_application_address(a.ptr),
	)
}

// IntegrityToken returns the platform specific integrity token
func (a *Attestation) IntegrityToken() []byte {
	return C.GoBytes(
		unsafe.Pointer(C.self_platform_attestation_integrity_token_buf(a.ptr)),
		C.int(C.self_platform_attestation_integrity_token_len(a.ptr)),
	)
}
